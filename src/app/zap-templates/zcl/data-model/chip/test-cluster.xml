<?xml version="1.0"?>
<configurator>
  <bitmap name="SimpleBitmap" type="bitmap8">
    <cluster code="0xFFF1FC05"/>
    <field mask="0x1" name="ValueA"/>
    <field mask="0x2" name="ValueB"/>
    <field mask="0x4" name="ValueC"/>
  </bitmap>
  <bitmap name="Bitmap8MaskMap" type="bitmap8">
    <cluster code="0xFFF1FC05"/>
    <field mask="0x01" name="MaskVal1"/>
    <field mask="0x02" name="MaskVal2"/>
    <field mask="0x04" name="MaskVal3"/>
    <field mask="0x40" name="MaskVal4"/>
  </bitmap>
  <bitmap name="Bitmap16MaskMap" type="bitmap16">
    <cluster code="0xFFF1FC05"/>
    <field mask="0x01" name="MaskVal1"/>
    <field mask="0x02" name="MaskVal2"/>
    <field mask="0x04" name="MaskVal3"/>
    <field mask="0x4000" name="MaskVal4"/>
  </bitmap>
  <bitmap name="Bitmap32MaskMap" type="bitmap32">
    <cluster code="0xFFF1FC05"/>
    <field mask="0x01" name="MaskVal1"/>
    <field mask="0x02" name="MaskVal2"/>
    <field mask="0x04" name="MaskVal3"/>
    <field mask="0x40000000" name="MaskVal4"/>
  </bitmap>
  <bitmap name="Bitmap64MaskMap" type="bitmap64">
    <cluster code="0xFFF1FC05"/>
    <field mask="0x01" name="MaskVal1"/>
    <field mask="0x02" name="MaskVal2"/>
    <field mask="0x04" name="MaskVal3"/>
    <field mask="0x4000000000000000" name="MaskVal4"/>
  </bitmap>
  <cluster apiMaturity="internal">
    <attribute code="0x0000" default="false" define="BOOLEAN" optional="false" side="server" type="boolean" writable="true">boolean</attribute>
    <attribute code="0x0001" default="0" define="BITMAP8" optional="false" side="server" type="Bitmap8MaskMap" writable="true">bitmap8</attribute>
    <attribute code="0x0002" default="0" define="BITMAP16" optional="false" side="server" type="Bitmap16MaskMap" writable="true">bitmap16</attribute>
    <attribute code="0x0003" default="0" define="BITMAP32" optional="false" side="server" type="Bitmap32MaskMap" writable="true">bitmap32</attribute>
    <attribute code="0x0004" default="0" define="BITMAP64" optional="false" side="server" type="Bitmap64MaskMap" writable="true">bitmap64</attribute>
    <attribute code="0x0005" default="0" define="INT8U" optional="false" side="server" type="int8u" writable="true">int8u</attribute>
    <attribute code="0x0006" default="0" define="INT16U" optional="false" side="server" type="int16u" writable="true">int16u</attribute>
    <attribute code="0x0007" default="0" define="INT24U" optional="false" side="server" type="int24u" writable="true">int24u</attribute>
    <attribute code="0x0008" default="0" define="INT32U" optional="false" side="server" type="int32u" writable="true">int32u</attribute>
    <attribute code="0x0009" default="0" define="INT40U" optional="false" side="server" type="int40u" writable="true">int40u</attribute>
    <attribute code="0x000A" default="0" define="INT48U" optional="false" side="server" type="int48u" writable="true">int48u</attribute>
    <attribute code="0x000B" default="0" define="INT56U" optional="false" side="server" type="int56u" writable="true">int56u</attribute>
    <attribute code="0x000C" default="0" define="INT64U" optional="false" side="server" type="int64u" writable="true">int64u</attribute>
    <attribute code="0x000D" default="0" define="INT8S" optional="false" side="server" type="int8s" writable="true">int8s</attribute>
    <attribute code="0x000E" default="0" define="INT16S" optional="false" side="server" type="int16s" writable="true">int16s</attribute>
    <attribute code="0x000F" default="0" define="INT24S" optional="false" side="server" type="int24s" writable="true">int24s</attribute>
    <attribute code="0x0010" default="0" define="INT32S" optional="false" side="server" type="int32s" writable="true">int32s</attribute>
    <attribute code="0x0011" default="0" define="INT40S" optional="false" side="server" type="int40s" writable="true">int40s</attribute>
    <attribute code="0x0012" default="0" define="INT48S" optional="false" side="server" type="int48s" writable="true">int48s</attribute>
    <attribute code="0x0013" default="0" define="INT56S" optional="false" side="server" type="int56s" writable="true">int56s</attribute>
    <attribute code="0x0014" default="0" define="INT64S" optional="false" side="server" type="int64s" writable="true">int64s</attribute>
    <attribute code="0x0015" default="0" define="ENUM8" optional="false" side="server" type="enum8" writable="true">enum8</attribute>
    <attribute code="0x0016" default="0" define="ENUM16" optional="false" side="server" type="enum16" writable="true">enum16</attribute>
    <attribute code="0x0017" default="0" define="FLOAT_SINGLE" optional="false" side="server" type="SINGLE" writable="true">float_single</attribute>
    <attribute code="0x0018" default="0" define="FLOAT_DOUBLE" optional="false" side="server" type="DOUBLE" writable="true">float_double</attribute>
    <attribute code="0x0019" define="OCTET_STRING" length="10" optional="false" side="server" type="octet_string" writable="true">octet_string</attribute>
    <attribute code="0x001A" define="LIST" entryType="int8u" length="10" optional="false" side="server" type="ARRAY" writable="true">list_int8u</attribute>
    <attribute code="0x001B" define="LIST_OCTET_STRING" entryType="octet_string" length="254" optional="false" side="server" type="ARRAY" writable="true">list_octet_string</attribute>
    <attribute code="0x001C" define="LIST_STRUCT_OCTET_STRING" entryType="TestListStructOctet" length="254" optional="false" side="server" type="ARRAY" writable="true">list_struct_octet_string</attribute>
    <attribute code="0x001D" define="LONG_OCTET_STRING" length="1000" optional="false" side="server" type="LONG_OCTET_STRING" writable="true">long_octet_string</attribute>
    <attribute code="0x001E" define="CHAR_STRING" length="10" optional="false" side="server" type="char_string" writable="true">char_string</attribute>
    <attribute code="0x001F" define="LONG_CHAR_STRING" length="1000" optional="false" side="server" type="LONG_CHAR_STRING" writable="true">long_char_string</attribute>
    <attribute code="0x0020" define="EPOCH_US" optional="false" side="server" type="epoch_us" writable="true">epoch_us</attribute>
    <attribute code="0x0021" define="EPOCH_S" optional="false" side="server" type="epoch_s" writable="true">epoch_s</attribute>
    <attribute code="0x0022" default="0" define="TEST_VENDOR_ID" optional="false" side="server" type="vendor_id" writable="true">vendor_id</attribute>
    <attribute code="0x0023" define="LIST_OF_STRUCTS_WITH_OPTIONALS" entryType="NullablesAndOptionalsStruct" optional="false" side="server" type="ARRAY" writable="true">list_nullables_and_optionals_struct</attribute>
    <attribute code="0x0024" define="SIMPLE_ENUM" optional="false" side="server" type="SimpleEnum" writable="true">enum_attr</attribute>
    <attribute code="0x0025" define="STRUCT" optional="false" side="server" type="SimpleStruct" writable="true">struct_attr</attribute>
    <attribute code="0x0026" default="70" define="RANGE_RESTRICTED_INT8U" max="100" min="20" optional="false" side="server" type="int8u" writable="true">range_restricted_int8u</attribute>
    <attribute code="0x0027" default="-5" define="RANGE_RESTRICTED_INT8s" max="50" min="-40" optional="false" side="server" type="int8s" writable="true">range_restricted_int8s</attribute>
    <attribute code="0x0028" default="200" define="RANGE_RESTRICTED_INT16U" max="1000" min="100" optional="false" side="server" type="int16u" writable="true">range_restricted_int16u</attribute>
    <attribute code="0x0029" default="-5" define="RANGE_RESTRICTED_INT16s" max="200" min="-150" optional="false" side="server" type="int16s" writable="true">range_restricted_int16s</attribute>
    <attribute code="0x002A" define="LIST_LONG_OCTET_STRING" entryType="LONG_OCTET_STRING" length="1000" optional="false" side="server" type="ARRAY" writable="true">list_long_octet_string</attribute>
    <attribute code="0x002B" define="LIST_FABRIC_SCOPED" entryType="TestFabricScoped" length="10" optional="false" side="server" type="ARRAY" writable="true">list_fabric_scoped</attribute>
    <attribute code="0x0030" define="TIMED_WRITE_BOOLEAN" mustUseTimedWrite="true" side="server" type="boolean" writable="true">timed_write_boolean</attribute>
    <attribute code="0x0031" define="GENERAL_ERROR_BOOLEAN" optional="false" side="server" type="boolean" writable="true">general_error_boolean</attribute>
    <attribute code="0x0032" define="CLUSTER_ERROR_BOOLEAN" optional="false" side="server" type="boolean" writable="true">cluster_error_boolean</attribute>
    <attribute code="0x4000" default="false" define="NULLABLE_BOOLEAN" isNullable="true" optional="false" side="server" type="boolean" writable="true">nullable_boolean</attribute>
    <attribute code="0x4001" default="0" define="NULLABLE_BITMAP8" isNullable="true" optional="false" side="server" type="Bitmap8MaskMap" writable="true">nullable_bitmap8</attribute>
    <attribute code="0x4002" default="0" define="NULLABLE_BITMAP16" isNullable="true" optional="false" side="server" type="Bitmap16MaskMap" writable="true">nullable_bitmap16</attribute>
    <attribute code="0x4003" default="0" define="NULLABLE_BITMAP32" isNullable="true" optional="false" side="server" type="Bitmap32MaskMap" writable="true">nullable_bitmap32</attribute>
    <attribute code="0x4004" default="0" define="NULLABLE_BITMAP64" isNullable="true" optional="false" side="server" type="Bitmap64MaskMap" writable="true">nullable_bitmap64</attribute>
    <attribute code="0x4005" default="0" define="NULLABLE_INT8U" isNullable="true" optional="false" side="server" type="int8u" writable="true">nullable_int8u</attribute>
    <attribute code="0x4006" default="0" define="NULLABLE_INT16U" isNullable="true" optional="false" side="server" type="int16u" writable="true">nullable_int16u</attribute>
    <attribute code="0x4007" default="0" define="NULLABLE_INT24U" isNullable="true" optional="false" side="server" type="int24u" writable="true">nullable_int24u</attribute>
    <attribute code="0x4008" default="0" define="NULLABLE_INT32U" isNullable="true" optional="false" side="server" type="int32u" writable="true">nullable_int32u</attribute>
    <attribute code="0x4009" default="0" define="NULLABLE_INT40U" isNullable="true" optional="false" side="server" type="int40u" writable="true">nullable_int40u</attribute>
    <attribute code="0x400A" default="0" define="NULLABLE_INT48U" isNullable="true" optional="false" side="server" type="int48u" writable="true">nullable_int48u</attribute>
    <attribute code="0x400B" default="0" define="NULLABLE_INT56U" isNullable="true" optional="false" side="server" type="int56u" writable="true">nullable_int56u</attribute>
    <attribute code="0x400C" default="0" define="NULLABLE_INT64U" isNullable="true" optional="false" side="server" type="int64u" writable="true">nullable_int64u</attribute>
    <attribute code="0x400D" default="0" define="NULLABLE_INT8S" isNullable="true" optional="false" side="server" type="int8s" writable="true">nullable_int8s</attribute>
    <attribute code="0x400E" default="0" define="NULLABLE_INT16S" isNullable="true" optional="false" side="server" type="int16s" writable="true">nullable_int16s</attribute>
    <attribute code="0x400F" default="0" define="NULLABLE_INT24S" isNullable="true" optional="false" side="server" type="int24s" writable="true">nullable_int24s</attribute>
    <attribute code="0x4010" default="0" define="NULLABLE_INT32S" isNullable="true" optional="false" side="server" type="int32s" writable="true">nullable_int32s</attribute>
    <attribute code="0x4011" default="0" define="NULLABLE_INT40S" isNullable="true" optional="false" side="server" type="int40s" writable="true">nullable_int40s</attribute>
    <attribute code="0x4012" default="0" define="NULLABLE_INT48S" isNullable="true" optional="false" side="server" type="int48s" writable="true">nullable_int48s</attribute>
    <attribute code="0x4013" default="0" define="NULLABLE_INT56S" isNullable="true" optional="false" side="server" type="int56s" writable="true">nullable_int56s</attribute>
    <attribute code="0x4014" default="0" define="NULLABLE_INT64S" isNullable="true" optional="false" side="server" type="int64s" writable="true">nullable_int64s</attribute>
    <attribute code="0x4015" default="0" define="NULLABLE_ENUM8" isNullable="true" optional="false" side="server" type="enum8" writable="true">nullable_enum8</attribute>
    <attribute code="0x4016" default="0" define="NULLABLE_ENUM16" isNullable="true" optional="false" side="server" type="enum16" writable="true">nullable_enum16</attribute>
    <attribute code="0x4017" default="0" define="NULLABLE_FLOAT_SINGLE" isNullable="true" optional="false" side="server" type="SINGLE" writable="true">nullable_float_single</attribute>
    <attribute code="0x4018" default="0" define="NULLABLE_FLOAT_DOUBLE" isNullable="true" optional="false" side="server" type="DOUBLE" writable="true">nullable_float_double</attribute>
    <attribute code="0x4019" define="NULLABLE_OCTET_STRING" isNullable="true" length="10" optional="false" side="server" type="octet_string" writable="true">nullable_octet_string</attribute>
    <attribute code="0x401E" define="NULLABLE_CHAR_STRING" isNullable="true" length="10" optional="false" side="server" type="char_string" writable="true">nullable_char_string</attribute>
    <attribute code="0x4024" define="NULLABLE_SIMPLE_ENUM" isNullable="true" optional="false" side="server" type="SimpleEnum" writable="true">nullable_enum_attr</attribute>
    <attribute code="0x4025" define="NULLABLE_STRUCT" isNullable="true" optional="false" side="server" type="SimpleStruct" writable="true">nullable_struct</attribute>
    <attribute code="0x4026" default="70" define="NULLABLE_RANGE_RESTRICTED_INT8U" isNullable="true" max="100" min="20" optional="false" side="server" type="int8u" writable="true">nullable_range_restricted_int8u</attribute>
    <attribute code="0x4027" default="-5" define="NULLABLE_RANGE_RESTRICTED_INT8s" isNullable="true" max="50" min="-40" optional="false" side="server" type="int8s" writable="true">nullable_range_restricted_int8s</attribute>
    <attribute code="0x4028" default="200" define="NULLABLE_RANGE_RESTRICTED_INT16U" isNullable="true" max="1000" min="100" optional="false" side="server" type="int16u" writable="true">nullable_range_restricted_int16u</attribute>
    <attribute code="0x4029" default="-5" define="NULLABLE_RANGE_RESTRICTED_INT16S" isNullable="true" max="200" min="-150" optional="false" side="server" type="int16s" writable="true">nullable_range_restricted_int16s</attribute>
    <attribute code="0x402A" default="0" define="WRITE_ONLY_INT8U" optional="true" side="server" type="int8u" writable="true">write_only_int8u</attribute>
    <attribute code="0x00FF" define="UNSUPPORTED" optional="true" side="server" type="boolean" writable="true">unsupported</attribute>
    <code>0xFFF1FC05</code>
    <command code="0x00" name="Test" optional="false" source="client">
      <description>
        Simple command without any parameters and without a specific response
      </description>
    </command>
    <command code="0x01" name="TestNotHandled" optional="false" source="client">
      <description>
        Simple command without any parameters and without a specific response not handled by the server
      </description>
    </command>
    <command code="0x02" name="TestSpecific" optional="false" response="TestSpecificResponse" source="client">
      <description>
        Simple command without any parameters and with a specific response
      </description>
    </command>
    <command code="0x03" name="TestUnknownCommand" optional="true" source="client">
      <description>
        Simple command that should not be added to the server.
      </description>
    </command>
    <command code="0x04" name="TestAddArguments" optional="true" response="TestAddArgumentsResponse" source="client">
      <arg name="arg1" type="int8u"/>
      <arg name="arg2" type="int8u"/>
      <description>
        Command that takes two arguments and returns their sum.
      </description>
    </command>
    <command code="0x05" name="TestSimpleArgumentRequest" optional="true" response="TestSimpleArgumentResponse" source="client">
      <arg name="arg1" type="boolean"/>
      <description>
        Command that takes an argument which is bool
      </description>
    </command>
    <command code="0x06" name="TestStructArrayArgumentRequest" optional="true" response="TestStructArrayArgumentResponse" source="client">
      <arg array="true" name="arg1" type="NestedStructList"/>
      <arg array="true" name="arg2" type="SimpleStruct"/>
      <arg array="true" name="arg3" type="SimpleEnum"/>
      <arg array="true" name="arg4" type="boolean"/>
      <arg name="arg5" type="SimpleEnum"/>
      <arg name="arg6" type="boolean"/>
      <description>
        Command that takes various arguments that are arrays, including an array of structs which have a list member.
      </description>
    </command>
    <command code="0x07" name="TestStructArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg name="arg1" type="SimpleStruct"/>
      <description>
        Command that takes an argument which is struct.  The response echoes the
        'b' field of the single arg.
      </description>
    </command>
    <command code="0x08" name="TestNestedStructArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg name="arg1" type="NestedStruct"/>
      <description>
        Command that takes an argument which is nested struct.  The response
        echoes the 'b' field of ar1.c.
      </description>
    </command>
    <command code="0x09" name="TestListStructArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg array="true" name="arg1" type="SimpleStruct"/>
      <description>
        Command that takes an argument which is a list of structs.  The response
        returns false if there is some struct in the list whose 'b' field is
        false, and true otherwise (including if the list is empty).
      </description>
    </command>
    <command code="0x0A" name="TestListInt8UArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg array="true" name="arg1" type="int8u"/>
      <description>
        Command that takes an argument which is a list of INT8U.  The response
        returns false if the list contains a 0 in it, true otherwise (including
        if the list is empty).
      </description>
    </command>
    <command code="0x0B" name="TestNestedStructListArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg name="arg1" type="NestedStructList"/>
      <description>
        Command that takes an argument which is a Nested Struct List.  The
        response returns false if there is some struct in arg1 (either directly
        in arg1.c or in the arg1.d list) whose 'b' field is false, and true
        otherwise.
      </description>
    </command>
    <command code="0x0C" name="TestListNestedStructListArgumentRequest" optional="true" response="BooleanResponse" source="client">
      <arg array="true" name="arg1" type="NestedStructList"/>
      <description>
        Command that takes an argument which is a list of Nested Struct List.
        The response returns false if there is some struct in arg1 (either
        directly in as the 'c' field of an entry 'd' list of an entry) whose 'b'
        field is false, and true otherwise (including if the list is empty).
      </description>
    </command>
    <command code="0x0D" name="TestListInt8UReverseRequest" optional="true" response="TestListInt8UReverseResponse" source="client">
      <arg array="true" name="arg1" type="int8u"/>
      <description>
        Command that takes an argument which is a list of INT8U and expects a
        response that reverses the list.
      </description>
    </command>
    <command code="0x0E" name="TestEnumsRequest" optional="true" response="TestEnumsResponse" source="client">
      <arg name="arg1" type="vendor_id"/>
      <arg name="arg2" type="SimpleEnum"/>
      <description>
        Command that sends a vendor id and an enum.  The server is expected to
        echo them back.
      </description>
    </command>
    <command code="0x0F" name="TestNullableOptionalRequest" optional="true" response="TestNullableOptionalResponse" source="client">
      <arg isNullable="true" name="arg1" optional="true" type="int8u"/>
      <description>
        Command that takes an argument which is nullable and optional.  The
        response returns a boolean indicating whether the argument was present,
        if that's true a boolean indicating whether the argument was null, and
        if that' false the argument it received.
      </description>
    </command>
    <command code="0x10" name="TestComplexNullableOptionalRequest" optional="true" response="TestComplexNullableOptionalResponse" source="client">
      <arg isNullable="true" name="NullableInt" type="int16u"/>
      <arg name="OptionalInt" optional="true" type="int16u"/>
      <arg isNullable="true" name="NullableOptionalInt" optional="true" type="int16u"/>
      <arg isNullable="true" name="NullableString" type="char_string"/>
      <arg name="OptionalString" optional="true" type="char_string"/>
      <arg isNullable="true" name="NullableOptionalString" optional="true" type="char_string"/>
      <arg isNullable="true" name="NullableStruct" type="SimpleStruct"/>
      <arg name="OptionalStruct" optional="true" type="SimpleStruct"/>
      <arg isNullable="true" name="NullableOptionalStruct" optional="true" type="SimpleStruct"/>
      <arg array="true" isNullable="true" name="NullableList" type="SimpleEnum"/>
      <arg array="true" name="OptionalList" optional="true" type="SimpleEnum"/>
      <arg array="true" isNullable="true" name="NullableOptionalList" optional="true" type="SimpleEnum"/>
      <description>
        Command that takes various arguments which can be nullable and/or optional.  The
        response returns information about which things were received and what
        their state was.
      </description>
    </command>
    <command code="0x11" name="SimpleStructEchoRequest" optional="true" response="SimpleStructResponse" source="client">
      <arg name="arg1" type="SimpleStruct"/>
      <description>
        Command that takes an argument which is a struct.  The response echoes
        the struct back.
      </description>
    </command>
    <command code="0x12" mustUseTimedInvoke="true" name="TimedInvokeRequest" optional="true" source="client">
      <description>
        Command that just responds with a success status if the timed invoke
        conditions are met.
      </description>
    </command>
    <command code="0x13" name="TestSimpleOptionalArgumentRequest" optional="true" source="client">
      <arg name="arg1" optional="true" type="boolean"/>
      <description>
        Command that takes an optional argument which is bool. It responds with a success value if the optional is set to any value.
      </description>
    </command>
    <command code="0x14" name="TestEmitTestEventRequest" optional="true" response="TestEmitTestEventResponse" source="client">
      <arg name="arg1" type="int8u"/>
      <arg name="arg2" type="SimpleEnum"/>
      <arg name="arg3" type="boolean"/>
      <description>
        Command that takes identical arguments to the fields of the TestEvent and logs the TestEvent to the buffer.  Command returns an event ID as the response.
      </description>
    </command>
    <command code="0x15" name="TestEmitTestFabricScopedEventRequest" optional="true" response="TestEmitTestFabricScopedEventResponse" source="client">
      <arg name="arg1" type="int8u"/>
      <description>
        Command that takes identical arguments to the fields of the TestFabricScopedEvent and logs the TestFabricScopedEvent to the buffer.  Command returns an event ID as the response.
      </description>
    </command>
    <command code="0x00" disableDefaultResponse="true" name="TestSpecificResponse" optional="true" source="server">
      <arg name="returnValue" type="int8u"/>
      <description>
        Simple response for TestWithResponse with a simple return value
      </description>
    </command>
    <command code="0x01" disableDefaultResponse="true" name="TestAddArgumentsResponse" optional="true" source="server">
      <arg name="returnValue" type="int8u"/>
      <description>
        Response for TestAddArguments that returns the sum.
      </description>
    </command>
    <command code="0x02" disableDefaultResponse="true" name="TestSimpleArgumentResponse" optional="true" source="server">
      <arg name="returnValue" type="boolean"/>
      <description>
        Simple response for TestSimpleArgumentRequest with a simple return value
      </description>
    </command>
    <command code="0x03" disableDefaultResponse="true" name="TestStructArrayArgumentResponse" optional="true" source="server">
      <arg array="true" name="arg1" type="NestedStructList"/>
      <arg array="true" name="arg2" type="SimpleStruct"/>
      <arg array="true" name="arg3" type="SimpleEnum"/>
      <arg array="true" name="arg4" type="boolean"/>
      <arg name="arg5" type="SimpleEnum"/>
      <arg name="arg6" type="boolean"/>
      <description>
        Response for TestStructArrayArgumentRequest with complicated return arguments
      </description>
    </command>
    <command code="0x04" disableDefaultResponse="true" name="TestListInt8UReverseResponse" optional="true" source="server">
      <arg array="true" name="arg1" type="int8u"/>
      <description>
        Response that delivers the reversed list of uint8.
      </description>
    </command>
    <command code="0x05" disableDefaultResponse="true" name="TestEnumsResponse" optional="true" source="server">
      <arg name="arg1" type="vendor_id"/>
      <arg name="arg2" type="SimpleEnum"/>
      <description>
        Response that delivers a vendor id and an enum..
      </description>
    </command>
    <command code="0x06" disableDefaultResponse="true" name="TestNullableOptionalResponse" optional="true" source="server">
      <arg name="wasPresent" type="boolean"/>
      <arg name="wasNull" optional="true" type="boolean"/>
      <arg name="value" optional="true" type="int8u"/>
      <arg isNullable="true" name="originalValue" optional="true" type="int8u"/>
      <description>
        Delivers information about the argument TestNullableOptionalRequest had,
        and the original value if there was one.
      </description>
    </command>
    <command code="0x07" disableDefaultResponse="true" name="TestComplexNullableOptionalResponse" optional="true" source="server">
      <arg name="NullableIntWasNull" type="boolean"/>
      <arg name="NullableIntValue" optional="true" type="int16u"/>
      <arg name="OptionalIntWasPresent" type="boolean"/>
      <arg name="OptionalIntValue" optional="true" type="int16u"/>
      <arg name="NullableOptionalIntWasPresent" type="boolean"/>
      <arg name="NullableOptionalIntWasNull" optional="true" type="boolean"/>
      <arg name="NullableOptionalIntValue" optional="true" type="int16u"/>
      <arg name="NullableStringWasNull" type="boolean"/>
      <arg name="NullableStringValue" optional="true" type="char_string"/>
      <arg name="OptionalStringWasPresent" type="boolean"/>
      <arg name="OptionalStringValue" optional="true" type="char_string"/>
      <arg name="NullableOptionalStringWasPresent" type="boolean"/>
      <arg name="NullableOptionalStringWasNull" optional="true" type="boolean"/>
      <arg name="NullableOptionalStringValue" optional="true" type="char_string"/>
      <arg name="NullableStructWasNull" type="boolean"/>
      <arg name="NullableStructValue" optional="true" type="SimpleStruct"/>
      <arg name="OptionalStructWasPresent" type="boolean"/>
      <arg name="OptionalStructValue" optional="true" type="SimpleStruct"/>
      <arg name="NullableOptionalStructWasPresent" type="boolean"/>
      <arg name="NullableOptionalStructWasNull" optional="true" type="boolean"/>
      <arg name="NullableOptionalStructValue" optional="true" type="SimpleStruct"/>
      <arg name="NullableListWasNull" type="boolean"/>
      <arg array="true" name="NullableListValue" optional="true" type="SimpleEnum"/>
      <arg name="OptionalListWasPresent" type="boolean"/>
      <arg array="true" name="OptionalListValue" optional="true" type="SimpleEnum"/>
      <arg name="NullableOptionalListWasPresent" type="boolean"/>
      <arg name="NullableOptionalListWasNull" optional="true" type="boolean"/>
      <arg array="true" name="NullableOptionalListValue" optional="true" type="SimpleEnum"/>
      <description>
        Delivers information about the arguments TestComplexNullableOptionalRequest had.
      </description>
    </command>
    <command code="0x08" disableDefaultResponse="true" name="BooleanResponse" optional="true" source="server">
      <arg name="value" type="boolean"/>
      <description>
        Delivers a single boolean argument. What the argument means depends on
        what we're responding to.
      </description>
    </command>
    <command code="0x09" disableDefaultResponse="true" name="SimpleStructResponse" optional="true" source="server">
      <arg name="arg1" type="SimpleStruct"/>
      <description>
        Command that returns a single argument which is a struct.  The contents
        of the struct depend on what we are responding to.
      </description>
    </command>
    <command code="0x0A" disableDefaultResponse="true" name="TestEmitTestEventResponse" optional="true" source="server">
      <arg name="value" type="int64u"/>
      <description>
        Delivers the ID of an event in response to test command emitting fabric scoped events.
      </description>
    </command>
    <command code="0x0B" disableDefaultResponse="true" name="TestEmitTestFabricScopedEventResponse" optional="true" source="server">
      <arg name="value" type="int64u"/>
      <description>
        Delivers the ID of an event in response to test command emitting fabric scope events.
      </description>
    </command>
    <define>UNIT_TESTING_CLUSTER</define>
    <description>The Test Cluster is meant to validate the generated code</description>
    <domain>CHIP</domain>
    <event code="0x0001" name="TestEvent" priority="info" side="server">
      <description>Example test event</description>
      <field id="1" name="arg1" type="int8u"/>
      <field id="2" name="arg2" type="SimpleEnum"/>
      <field id="3" name="arg3" type="boolean"/>
      <field id="4" name="arg4" type="SimpleStruct"/>
      <field array="true" id="5" name="arg5" type="SimpleStruct"/>
      <field array="true" id="6" name="arg6" type="SimpleEnum"/>
    </event>
    <event code="0x0002" isFabricSensitive="true" name="TestFabricScopedEvent" priority="info" side="server">
      <description>Example test event</description>
    </event>
    <name>Unit Testing</name>
  </cluster>
  <domain name="CHIP"/>
  <enum name="SimpleEnum" type="enum8">
    <cluster code="0xFFF1FC05"/>
    <item name="Unspecified" value="0x00"/>
    <item name="ValueA" value="0x01"/>
    <item name="ValueB" value="0x02"/>
    <item name="ValueC" value="0x03"/>
  </enum>
  <struct name="TestListStructOctet">
    <cluster code="0xFFF1FC05"/>
    <item name="member1" type="int64u"/>
    <item length="32" name="member2" type="octet_string"/>
  </struct>
  <struct isFabricScoped="true" name="TestFabricScoped">
    <cluster code="0xFFF1FC05"/>
    <item fieldId="1" isFabricSensitive="true" name="fabricSensitiveInt8u" type="int8u"/>
    <item fieldId="2" isFabricSensitive="true" name="optionalFabricSensitiveInt8u" optional="true" type="int8u"/>
    <item fieldId="3" isFabricSensitive="true" isNullable="true" name="nullableFabricSensitiveInt8u" type="int8u"/>
    <item fieldId="4" isFabricSensitive="true" isNullable="true" name="nullableOptionalFabricSensitiveInt8u" optional="true" type="int8u"/>
    <item fieldId="5" isFabricSensitive="true" name="fabricSensitiveCharString" type="char_string"/>
    <item fieldId="6" isFabricSensitive="true" name="fabricSensitiveStruct" type="SimpleStruct"/>
    <item array="true" fieldId="7" isFabricSensitive="true" name="fabricSensitiveInt8uList" type="int8u"/>
  </struct>
  <struct name="SimpleStruct">
    <cluster code="0xFFF1FC05"/>
    <item name="a" optional="false" type="int8u"/>
    <item name="b" optional="false" type="boolean"/>
    <item name="c" optional="false" type="SimpleEnum"/>
    <item name="d" optional="false" type="octet_string"/>
    <item name="e" optional="false" type="char_string"/>
    <item name="f" optional="false" type="SimpleBitmap"/>
    <item name="g" optional="false" type="single"/>
    <item name="h" optional="false" type="double"/>
  </struct>
  <struct name="NestedStruct">
    <cluster code="0xFFF1FC05"/>
    <item name="a" optional="false" type="int8u"/>
    <item name="b" optional="false" type="boolean"/>
    <item name="c" optional="false" type="SimpleStruct"/>
  </struct>
  <struct name="NestedStructList">
    <cluster code="0xFFF1FC05"/>
    <item name="a" optional="false" type="int8u"/>
    <item name="b" optional="false" type="boolean"/>
    <item name="c" optional="false" type="SimpleStruct"/>
    <item array="true" name="d" optional="false" type="SimpleStruct"/>
    <item array="true" name="e" optional="false" type="int32u"/>
    <item array="true" name="f" optional="false" type="octet_string"/>
    <item array="true" name="g" optional="false" type="int8u"/>
  </struct>
  <struct name="DoubleNestedStructList">
    <cluster code="0xFFF1FC05"/>
    <item array="true" name="a" optional="false" type="NestedStructList"/>
  </struct>
  <struct name="NullablesAndOptionalsStruct">
    <cluster code="0xFFF1FC05"/>
    <item isNullable="true" name="NullableInt" type="int16u"/>
    <item name="OptionalInt" optional="true" type="int16u"/>
    <item isNullable="true" name="NullableOptionalInt" optional="true" type="int16u"/>
    <item isNullable="true" name="NullableString" type="char_string"/>
    <item name="OptionalString" optional="true" type="char_string"/>
    <item isNullable="true" name="NullableOptionalString" optional="true" type="char_string"/>
    <item isNullable="true" name="NullableStruct" type="SimpleStruct"/>
    <item name="OptionalStruct" optional="true" type="SimpleStruct"/>
    <item isNullable="true" name="NullableOptionalStruct" optional="true" type="SimpleStruct"/>
    <item array="true" isNullable="true" name="NullableList" type="SimpleEnum"/>
    <item array="true" name="OptionalList" optional="true" type="SimpleEnum"/>
    <item array="true" isNullable="true" name="NullableOptionalList" optional="true" type="SimpleEnum"/>
  </struct>
</configurator>
